This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-19T19:57:01.584Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    ui/
      accordion.jsx
      avatar.jsx
      button.jsx
      card.jsx
      checkbox.jsx
      command.jsx
      dialog.jsx
      dropdown-menu.jsx
      input.jsx
      label.jsx
      popover.jsx
      SimpleDialog.jsx
      slider.jsx
      switch.jsx
      textarea.jsx
    Auth.jsx
    UserMenu.jsx
    UserSearch.jsx
  features/
    restaurants/
      components/
        AddRestaurant.jsx
        DynamicInput.jsx
        RestaurantCard.jsx
        RestaurantFilter.jsx
        RestaurantList.jsx
        RestaurantPopup.jsx
      hooks/
        useRestaurantOperations.js
        useRestaurants.js
        useTypesAndCities.js
      RestaurantDashboard.jsx
  lib/
    utils.js
  App.css
  App.jsx
  App.module.css
  ErrorBoundary.jsx
  index.css
  main.jsx
  supabaseClient.js
.gitignore
components.json
eslint.config.js
index.html
jsconfig.json
package.json
postcss.config.js
README.md
tailwind.config.js
vite.config.js

================================================================
Repository Files
================================================================

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/ui/accordion.jsx
================
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "../../lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item ref={ref} className={cn("border-b", className)} {...props} />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}>
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className={cn(
      "overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down",
      className
    )}
    {...props}>
    <div className="pb-4 pt-0">{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: src/components/ui/avatar.jsx
================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
    {...props} />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props} />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props} />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: src/components/ui/button.jsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    (<Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props} />)
  );
})
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/card.jsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-xl border bg-card text-card-foreground shadow", className)}
    {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props} />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props} />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props} />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/checkbox.jsx
================
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "../../lib/utils"

const Checkbox = React.forwardRef(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}>
    <CheckboxPrimitive.Indicator className={cn("flex items-center justify-center text-current")}>
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: src/components/ui/command.jsx
================
import * as React from "react"
import { MagnifyingGlassIcon } from "@radix-ui/react-icons"
import { Command as CommandPrimitive } from "cmdk"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props} />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({
  children,
  ...props
}) => {
  return (
    (<Dialog {...props}>
      <DialogContent className="overflow-hidden p-0">
        <Command
          className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>)
  );
}

const CommandInput = React.forwardRef(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <MagnifyingGlassIcon className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props} />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props} />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef((props, ref) => (
  <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props} />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator ref={ref} className={cn("-mx-1 h-px bg-border", className)} {...props} />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props} />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}) => {
  return (
    (<span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)}
      {...props} />)
  );
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: src/components/ui/dialog.jsx
================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { Cross2Icon } from "@radix-ui/react-icons"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props} />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}>
      {children}
      <DialogPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)}
    {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: src/components/ui/dropdown-menu.jsx
================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}>
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props} />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props} />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props} />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props} />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}) => {
  return (
    (<span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props} />)
  );
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: src/components/ui/input.jsx
================
import * as React from "react"

import { cn } from "../../lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/label.jsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva } from "class-variance-authority"

import { cn } from "../../lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: src/components/ui/popover.jsx
================
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props} />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

================
File: src/components/ui/SimpleDialog.jsx
================
import React from 'react';
import { X } from 'lucide-react';

export const SimpleDialog = ({ isOpen, onClose, title, children }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold">{title}</h3>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <X size={20} />
          </button>
        </div>
        {children}
      </div>
    </div>
  );
};

================
File: src/components/ui/slider.jsx
================
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "../../lib/utils"

const Slider = React.forwardRef(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn("relative flex w-full touch-none select-none items-center", className)}
    {...props}>
    <SliderPrimitive.Track
      className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb
      className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"
    />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: src/components/ui/switch.jsx
================
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "../../lib/utils"

const Switch = React.forwardRef(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: src/components/ui/textarea.jsx
================
import * as React from "react"

import { cn } from "../../lib/utils"

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

================
File: src/components/Auth.jsx
================
import React, { useState } from 'react';
import { signUp, signIn } from '../supabaseClient';
import { Input } from './ui/input';
import { Button } from './ui/button';
import { Label } from './ui/label';
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './ui/card';

const Auth = ({ setUser }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [username, setUsername] = useState('');
  const [isSignUp, setIsSignUp] = useState(false);
  const [error, setError] = useState('');

  const handleAuth = async (e) => {
    e.preventDefault();
    setError('');
    try {
      if (isSignUp) {
        console.log("Attempting sign up...");
        const { user, error } = await signUp(email, password, username);
        if (error) throw error;
        console.log("Sign up successful:", user);
        setUser(user);
      } else {
        console.log("Attempting sign in...");
        const { user, error } = await signIn(email, password);
        if (error) throw error;
        console.log("Sign in successful:", user);
        setUser(user);
      }
    } catch (error) {
      console.error("Auth error:", error);
      setError(error.message);
      // If it's a duplicate key error, it might mean the user already exists
      if (error.message.includes('duplicate key value')) {
        setError("An account with this email already exists. Try signing in instead.");
      }
    }
  };

  return (
    <Card className="w-[350px] mx-auto mt-10">
      <CardHeader>
        <CardTitle>{isSignUp ? 'Sign Up' : 'Sign In'}</CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleAuth} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="password">Password</Label>
            <Input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          {isSignUp && (
            <div className="space-y-2">
              <Label htmlFor="username">Username</Label>
              <Input
                id="username"
                type="text"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                required
              />
            </div>
          )}
          <Button type="submit" className="w-full">
            {isSignUp ? 'Sign Up' : 'Sign In'}
          </Button>
        </form>
      </CardContent>
      <CardFooter>
        <Button variant="link" onClick={() => setIsSignUp(!isSignUp)} className="w-full">
          {isSignUp ? 'Already have an account? Sign In' : 'Need an account? Sign Up'}
        </Button>
      </CardFooter>
      {error && <p className="text-red-500 text-center mt-2">{error}</p>}
    </Card>
  );
};

export default Auth;

================
File: src/components/UserMenu.jsx
================
import React from 'react';
import { Avatar, AvatarFallback, AvatarImage } from "./ui/avatar";
import { Button } from "./ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "./ui/dropdown-menu";
import { signOut } from '../supabaseClient';

const UserMenu = ({ user, setUser }) => {
  const handleSignOut = async () => {
    await signOut();
    setUser(null);
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-8 w-8 rounded-full">
          <Avatar className="h-8 w-8">
            <AvatarImage src="/avatars/01.png" alt={user.email} />
            <AvatarFallback>{user.email[0].toUpperCase()}</AvatarFallback>
          </Avatar>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">{user.email}</p>
            <p className="text-xs leading-none text-muted-foreground">
              {user.profile?.username || user.email}
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuItem onClick={handleSignOut}>
          Log out
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default UserMenu;

================
File: src/components/UserSearch.jsx
================
import React, { useState, useEffect, useRef } from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { searchUsers } from '../supabaseClient';
import { Search, User } from 'lucide-react';
import { Popover, PopoverContent, PopoverTrigger } from './ui/popover';

const UserSearch = ({ onUserSelect, currentUserId }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const searchRef = useRef(null);

  useEffect(() => {
    const delayDebounceFn = setTimeout(() => {
      if (query) {
        handleSearch();
      } else {
        setResults([]);
      }
    }, 300);

    return () => clearTimeout(delayDebounceFn);
  }, [query]);

  const handleSearch = async () => {
    if (query.trim()) {
      try {
        const { data } = await searchUsers(query, currentUserId);
        setResults(data || []);
      } catch (error) {
        console.error('Search error:', error);
        setResults([]);
      }
    }
  };

  return (
    <Popover open={isOpen} onOpenChange={setIsOpen}>
      <PopoverTrigger asChild>
        <Button variant="outline" size="icon">
          <Search className="h-4 w-4" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-64 p-0">
        <div className="p-2">
          <Input
            type="text"
            placeholder="Search users..."
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            className="w-full"
          />
        </div>
        {results.length > 0 && (
          <ul className="max-h-48 overflow-auto">
            {results.map((user) => (
              <li
                key={user.id}
                className="cursor-pointer flex items-center p-2 hover:bg-gray-100"
                onClick={() => {
                  onUserSelect(user);
                  setIsOpen(false);
                  setQuery('');
                  setResults([]);
                }}
              >
                <User className="mr-2 h-4 w-4" />
                {user.username}
              </li>
            ))}
          </ul>
        )}
      </PopoverContent>
    </Popover>
  );
};

export default UserSearch;

================
File: src/features/restaurants/components/AddRestaurant.jsx
================
import React, { useState, useEffect } from 'react';
import { Button } from '../../../components/ui/button';
import { Input } from '../../../components/ui/input';
import { Label } from '../../../components/ui/label';
import { Textarea } from '../../../components/ui/textarea';
import { Slider } from '../../../components/ui/slider';
import { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from '../../../components/ui/accordion';
import { Euro, Star } from 'lucide-react';
import { Switch } from '../../../components/ui/switch';
import { SimpleDialog } from '../../../components/ui/SimpleDialog';

const PriceSelector = ({ price, setPrice }) => {
  return (
    <div className="flex space-x-2">
      {[1, 2, 3].map((value) => (
        <Button
          key={value}
          onClick={() => setPrice(value)}
          variant={price === value ? "default" : "outline"}
          size="sm"
          className="w-20"
        >
          {'€'.repeat(value)}
        </Button>
      ))}
    </div>
  );
};

const AddRestaurant = ({ onAdd, onCancel, types, cities, addType, editType, deleteType, addCity, editCity, deleteCity, initialData = null }) => {
  const [name, setName] = useState('');
  const [type, setType] = useState(null);
  const [city, setCity] = useState(null);
  const [rating, setRating] = useState(0);
  const [price, setPrice] = useState(1);
  const [notes, setNotes] = useState('');
  const [toTry, setToTry] = useState(false);
  const [isAddTypeDialogOpen, setIsAddTypeDialogOpen] = useState(false);
  const [isAddCityDialogOpen, setIsAddCityDialogOpen] = useState(false);
  const [newTypeName, setNewTypeName] = useState('');
  const [newCityName, setNewCityName] = useState('');

  useEffect(() => {
    if (initialData) {
      setName(initialData.name);
      setType(types.find(t => t.id === initialData.type_id));
      setCity(cities.find(c => c.id === initialData.city_id));
      setRating(initialData.rating || 0);
      setPrice(initialData.price || 1);
      setNotes(initialData.notes || '');
      setToTry(initialData.to_try);
    }
  }, [initialData, types, cities]);

  const handleAddType = async () => {
    if (newTypeName.trim()) {
      const newType = await addType(newTypeName.trim());
      setType(newType);
      setNewTypeName('');
      setIsAddTypeDialogOpen(false);
    }
  };

  const handleAddCity = async () => {
    if (newCityName.trim()) {
      const newCity = await addCity(newCityName.trim());
      setCity(newCity);
      setNewCityName('');
      setIsAddCityDialogOpen(false);
    }
  };

  const handleSubmit = async () => {
    if (name && type && city) {
      try {
        const restaurantData = { 
          id: initialData?.id,
          name, 
          type_id: type.id, 
          city_id: city.id, 
          rating: toTry ? null : rating, 
          price,
          notes,
          to_try: toTry 
        };
  
        await onAdd(restaurantData);
        resetForm();
      } catch (error) {
        console.error('Error in handleSubmit:', error);
        alert('Failed to save restaurant: ' + error.message);
      }
    } else {
      alert('Please fill in all required fields');
    }
  };

  const resetForm = () => {
    setName('');
    setType(null);
    setCity(null);
    setRating(0);
    setPrice(1);
    setNotes('');
    setToTry(false);
  };

  return (
    <div className="space-y-6 max-h-[80vh] overflow-y-auto p-2">
      <div className="space-y-2">
        <Label htmlFor="name">Name</Label>
        <Input id="name" value={name} onChange={(e) => setName(e.target.value)} className="w-full" />
      </div>
      
      <Accordion type="single" collapsible className="w-full">
        <AccordionItem value="type" className="border-none">
          <AccordionTrigger className="bg-gray-50 px-4 py-3 rounded-lg hover:bg-gray-100 transition-colors">Type</AccordionTrigger>
          <AccordionContent className="bg-gray-50 px-4 py-3 mt-1 rounded-lg">
            <div className="flex flex-wrap gap-2">
              {types.map((t) => (
                <Button
                  key={t.id}
                  variant={type && type.id === t.id ? "default" : "outline"}
                  size="sm"
                  onClick={() => setType(t)}
                >
                  {t.name}
                </Button>
              ))}
              <Button variant="outline" size="sm" onClick={() => setIsAddTypeDialogOpen(true)}>
                + Add New
              </Button>
            </div>
          </AccordionContent>
        </AccordionItem>
      </Accordion>
      
      <Accordion type="single" collapsible className="w-full">
        <AccordionItem value="city" className="border-none">
          <AccordionTrigger className="bg-gray-50 px-4 py-3 rounded-lg hover:bg-gray-100 transition-colors">City</AccordionTrigger>
          <AccordionContent className="bg-gray-50 px-4 py-3 mt-1 rounded-lg">
            <div className="flex flex-wrap gap-2">
              {cities.map((c) => (
                <Button
                  key={c.id}
                  variant={city && city.id === c.id ? "default" : "outline"}
                  size="sm"
                  onClick={() => setCity(c)}
                >
                  {c.name}
                </Button>
              ))}
              <Button variant="outline" size="sm" onClick={() => setIsAddCityDialogOpen(true)}>
                + Add New
              </Button>
            </div>
          </AccordionContent>
        </AccordionItem>
      </Accordion>
      
      <div className="space-y-2">
        <Label>Price</Label>
        <PriceSelector price={price} setPrice={setPrice} />
      </div>
      
      <div className="flex items-center space-x-2">
        <Switch
          id="to-try"
          checked={toTry}
          onCheckedChange={setToTry}
        />
        <Label htmlFor="to-try">To Try</Label>
      </div>
      
      {!toTry && (
        <div className="space-y-2">
          <Label>Rating: {rating}/10</Label>
          <Slider
            min={1}
            max={10}
            step={1}
            value={[rating]}
            onValueChange={(value) => setRating(value[0])}
          />
        </div>
      )}
      
      <Accordion type="single" collapsible className="w-full">
        <AccordionItem value="notes" className="border-none">
          <AccordionTrigger className="bg-gray-50 px-4 py-3 rounded-lg hover:bg-gray-100 transition-colors">Notes</AccordionTrigger>
          <AccordionContent className="bg-gray-50 px-4 py-3 mt-1 rounded-lg">
            <Textarea 
              id="notes" 
              value={notes} 
              onChange={(e) => setNotes(e.target.value)}
              placeholder="Add any additional notes here..."
              rows={3}
            />
          </AccordionContent>
        </AccordionItem>
      </Accordion>
      
      <div className="flex justify-end space-x-2 mt-4">
        <Button variant="outline" onClick={onCancel}>Cancel</Button>
        <Button onClick={handleSubmit}>{initialData ? 'Update' : 'Add'} Restaurant</Button>
      </div>

      <SimpleDialog
        isOpen={isAddTypeDialogOpen}
        onClose={() => setIsAddTypeDialogOpen(false)}
        title="Add New Type"
      >
        <div className="space-y-4">
          <Label htmlFor="newTypeName">Type Name</Label>
          <Input
            id="newTypeName"
            value={newTypeName}
            onChange={(e) => setNewTypeName(e.target.value)}
            placeholder="Enter new type name"
          />
          <div className="flex justify-end space-x-2">
            <Button variant="outline" onClick={() => setIsAddTypeDialogOpen(false)}>Cancel</Button>
            <Button onClick={handleAddType}>Add Type</Button>
          </div>
        </div>
      </SimpleDialog>

      <SimpleDialog
        isOpen={isAddCityDialogOpen}
        onClose={() => setIsAddCityDialogOpen(false)}
        title="Add New City"
      >
        <div className="space-y-4">
          <Label htmlFor="newCityName">City Name</Label>
          <Input
            id="newCityName"
            value={newCityName}
            onChange={(e) => setNewCityName(e.target.value)}
            placeholder="Enter new city name"
          />
          <div className="flex justify-end space-x-2">
            <Button variant="outline" onClick={() => setIsAddCityDialogOpen(false)}>Cancel</Button>
            <Button onClick={handleAddCity}>Add City</Button>
          </div>
        </div>
      </SimpleDialog>
    </div>
  );
};

export default AddRestaurant;

================
File: src/features/restaurants/components/DynamicInput.jsx
================
import React, { useState } from 'react';
import { Button } from '../../../components/ui/button';
import { Input } from '../../../components/ui/input';
import { Label } from '../../../components/ui/label';
import { PlusCircle, Edit, Trash2 } from 'lucide-react';
import { SimpleDialog } from '../../../components/ui/SimpleDialog';

const DynamicInput = ({ options, selectedOption, onSelect, onAdd, onEdit, onDelete, placeholder, title }) => {
  const [inputValue, setInputValue] = useState('');
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingId, setEditingId] = useState(null);
  const [isEditing, setIsEditing] = useState(false);

  const handleInputChange = (e) => {
    setInputValue(e.target.value);
  };

  const handleAddNew = async () => {
    if (inputValue && !options.find(opt => opt.name.toLowerCase() === inputValue.toLowerCase())) {
      const newItem = await onAdd(inputValue);
      if (newItem) {
        onSelect(newItem);
        setInputValue('');
        setIsDialogOpen(false);
      }
    }
  };

  const handleEdit = async () => {
    if (inputValue && inputValue !== options.find(opt => opt.id === editingId).name) {
      await onEdit(editingId, inputValue);
      setEditingId(null);
      setInputValue('');
      setIsDialogOpen(false);
      setIsEditing(false);
    }
  };

  const handleDelete = async () => {
    await onDelete(editingId);
    setEditingId(null);
    setInputValue('');
    setIsDialogOpen(false);
    setIsEditing(false);
  };

  const openEditDialog = (option) => {
    setEditingId(option.id);
    setInputValue(option.name);
    setIsEditing(true);
    setIsDialogOpen(true);
  };

  return (
    <div className="mb-4">
      <Label className="mb-2 block font-bold text-sm">{title}</Label>
      <div className="flex overflow-x-auto pb-2 mb-2 -mx-4 px-4">
        <div className="flex space-x-2">
          {options.map((option) => (
            <div key={option.id} className="flex-shrink-0">
              <Button
                variant={selectedOption && selectedOption.id === option.id ? "default" : "outline"}
                size="sm"
                onClick={() => onSelect(option)}
                className="text-sm"
              >
                {option.name}
                <Button 
                  size="sm" 
                  variant="ghost" 
                  onClick={(e) => {
                    e.stopPropagation();
                    openEditDialog(option);
                  }}
                  className="ml-1 p-1"
                >
                  <Edit size={12} />
                </Button>
              </Button>
            </div>
          ))}
          <Button onClick={() => {setIsDialogOpen(true); setIsEditing(false);}} size="sm" variant="outline" className="flex-shrink-0 text-sm">
            <PlusCircle size={16} className="mr-2" /> Add New
          </Button>
        </div>
      </div>
      <SimpleDialog
        isOpen={isDialogOpen}
        onClose={() => {setIsDialogOpen(false); setIsEditing(false);}}
        title={isEditing ? `Edit ${title}` : `Add New ${title}`}
      >
        <Input
          placeholder={placeholder}
          value={inputValue}
          onChange={handleInputChange}
          className="w-full text-sm mb-4"
        />
        <div className="flex justify-between">
          {isEditing ? (
            <>
              <Button onClick={handleDelete} variant="destructive" size="sm" className="w-[32%]">
                <Trash2 size={14} className="mr-1" /> Delete
              </Button>
              <Button onClick={() => {setIsDialogOpen(false); setIsEditing(false);}} variant="outline" size="sm" className="w-[32%]">
                Cancel
              </Button>
              <Button onClick={handleEdit} size="sm" className="w-[32%]">
                Save
              </Button>
            </>
          ) : (
            <>
              <Button onClick={() => {setInputValue(''); setIsDialogOpen(false);}} variant="outline" size="sm" className="w-[48%]">
                Cancel
              </Button>
              <Button onClick={handleAddNew} size="sm" className="w-[48%]">
                Save
              </Button>
            </>
          )}
        </div>
      </SimpleDialog>
    </div>
  );
};

export default DynamicInput;

================
File: src/features/restaurants/components/RestaurantCard.jsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent } from '../../../components/ui/card';
import { Star, Heart } from 'lucide-react';

const PriceDisplay = ({ price }) => {
  return (
    <div className="inline-flex text-sm">
      <span className="text-black">€</span>
      <span className={price >= 2 ? "text-black" : "text-gray-300"}>€</span>
      <span className={price >= 3 ? "text-black" : "text-gray-300"}>€</span>
    </div>
  );
};

const RestaurantCard = ({ restaurant, onClick, onLike, onUnlike, currentUserId }) => {
  const getEmoji = (type) => {
    const emojiMap = {
      'Italian': '🍕', 'Japanese': '🍣', 'Mexican': '🌮', 'Chinese': '🥡',
      'Indian': '🍛', 'American': '🍔', 'French': '🥐', 'Thai': '🍜',
      'Greek': '🥙', 'Spanish': '🥘',
    };
    return emojiMap[type] || '🍴';
  };

  const getCityEmoji = (city) => {
    const cityEmojiMap = {
      'New York': '🗽', 'Los Angeles': '🌴', 'Chicago': '🌭', 'Houston': '🤠',
      'Phoenix': '🏜️', 'Philadelphia': '🔔', 'San Antonio': '🌵', 'San Diego': '🏖️',
      'Dallas': '🐎', 'San Jose': '💻',
    };
    return cityEmojiMap[city] || '🏙️';
  };

  const renderStars = (rating) => {
    const starCount = Math.round((rating / 10) * 5);
    return (
      <div className="flex">
        {[...Array(5)].map((_, index) => (
          <Star
            key={index}
            size={16}
            className={index < starCount ? "text-yellow-400 fill-current" : "text-gray-200"}
          />
        ))}
      </div>
    );
  };

  const isOwned = restaurant.user_id === currentUserId;

  const handleLikeClick = (e) => {
    e.stopPropagation();
    if (restaurant.isLiked) {
      onUnlike(restaurant.id);
    } else {
      onLike(restaurant.id);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 50 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: 50 }}
      transition={{ duration: 0.3 }}
      onClick={onClick}
    >
      <Card className={`mb-4 overflow-hidden hover:shadow-md transition-shadow duration-300 cursor-pointer w-full ${restaurant.isLiked ? 'border-primary' : ''}`}>
        <CardContent className="p-4">
          <div className="flex justify-between items-start">
            <div className="flex items-center">
              <h3 className="text-lg font-semibold">{restaurant.name}</h3>
              {!isOwned && (
                <Heart 
                  className={`ml-2 cursor-pointer ${restaurant.isLiked ? "text-primary fill-current" : "text-gray-300"}`}
                  onClick={handleLikeClick}
                />
              )}
            </div>
            <div className="flex flex-col items-end">
              {restaurant.to_try ? (
                <span className="bg-blue-100 text-blue-800 text-xs font-medium px-2 py-0.5 rounded-full">
                  To Try
                </span>
              ) : (
                renderStars(restaurant.rating)
              )}
            </div>
          </div>
          <div className="flex items-center justify-between text-sm text-gray-600 mt-2">
          <div className="flex items-center">
            {restaurant.restaurant_types?.name && (
              <>
                <span className="mr-2">{getEmoji(restaurant.restaurant_types.name)}</span>
                <span className="mr-4">{restaurant.restaurant_types.name}</span>
              </>
            )}
            {restaurant.cities?.name && (
              <>
                <span className="mr-2">{getCityEmoji(restaurant.cities.name)}</span>
                <span>{restaurant.cities.name}</span>
              </>
            )}
          </div>
            <PriceDisplay price={restaurant.price} />
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
};

export default RestaurantCard;

================
File: src/features/restaurants/components/RestaurantFilter.jsx
================
import React from 'react';
import { Button } from '../../../components/ui/button';
import { Label } from '../../../components/ui/label';
import { Input } from '../../../components/ui/input';
import { Slider } from '../../../components/ui/slider';
import { Switch } from "../../../components/ui/switch";
import { X, ChevronDown, ChevronUp } from 'lucide-react';
import { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from '../../../components/ui/accordion';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '../../../components/ui/dialog';

const PriceSelector = ({ price, setPrice }) => {
  return (
    <div className="flex space-x-2">
      {[1, 2, 3].map((value) => (
        <button
          key={value}
          onClick={() => setPrice(value)}
          className={`px-3 py-1 rounded-md transition-colors ${
            price === value ? 'bg-gray-200' : 'bg-gray-100'
          }`}
        >
          <span className="text-black">€</span>
          <span className={value >= 2 ? "text-black" : "text-gray-300"}>€</span>
          <span className={value >= 3 ? "text-black" : "text-gray-300"}>€</span>
        </button>
      ))}
    </div>
  );
};

const RestaurantFilter = ({ isOpen, onClose, types, cities, filters, setFilters, sortOption, setSortOption }) => {
  const clearFilters = () => {
    setFilters({
      name: '',
      type_id: null,
      city_id: null,
      toTry: null,
      rating: 0,
      price: null
    });
    setSortOption('dateAdded');
  };

  const removeFilter = (key) => {
    setFilters(prev => ({ ...prev, [key]: null }));
  };

  const getFilterDisplayValue = (key, value) => {
    switch (key) {
      case 'type_id':
        return types.find(type => type.id === value)?.name || 'Unknown Type';
      case 'city_id':
        return cities.find(city => city.id === value)?.name || 'Unknown City';
      case 'price':
        return '€'.repeat(value);
      case 'toTry':
        return 'To Try';
      case 'rating':
        return `${value}/10`;
      default:
        return value;
    }
  };

  const activeFilters = Object.entries(filters).filter(([key, value]) => 
    value !== null && value !== '' && value !== 0 && key !== 'name'
  );

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Filter & Sort Favorants</DialogTitle>
          <DialogDescription>Customize your restaurant list view.</DialogDescription>
        </DialogHeader>
        <div className="space-y-6 max-h-[80vh] overflow-y-auto pr-2">
          {activeFilters.length > 0 && (
            <div className="flex flex-wrap gap-2">
              {activeFilters.map(([key, value]) => (
                <span key={key} className="bg-gray-100 text-gray-800 text-xs font-medium px-2.5 py-0.5 rounded-full flex items-center">
                  {getFilterDisplayValue(key, value)}
                  <button onClick={() => removeFilter(key)} className="ml-1 focus:outline-none">
                    <X size={12} />
                  </button>
                </span>
              ))}
            </div>
          )}
          
          <div className="space-y-4">
            <Label htmlFor="nameFilter">Name</Label>
            <Input
              id="nameFilter"
              value={filters.name}
              onChange={(e) => setFilters({ ...filters, name: e.target.value })}
              placeholder="Filter by name"
            />
          </div>
          
          <Accordion type="single" collapsible className="w-full space-y-4">
            <AccordionItem value="type" className="border-none">
              <AccordionTrigger className="bg-gray-50 p-3 rounded-t-lg hover:bg-gray-100 transition-colors">Type</AccordionTrigger>
              <AccordionContent className="bg-gray-50 p-3 rounded-b-lg">
                <div className="flex flex-wrap gap-2">
                  {types.map((type) => (
                    <Button
                      key={type.id}
                      variant={filters.type_id === type.id ? "default" : "outline"}
                      size="sm"
                      onClick={() => setFilters({ ...filters, type_id: filters.type_id === type.id ? null : type.id })}
                    >
                      {type.name}
                    </Button>
                  ))}
                </div>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
          
          <Accordion type="single" collapsible className="w-full space-y-4">
            <AccordionItem value="city" className="border-none">
              <AccordionTrigger className="bg-gray-50 p-3 rounded-t-lg hover:bg-gray-100 transition-colors">City</AccordionTrigger>
              <AccordionContent className="bg-gray-50 p-3 rounded-b-lg">
                <div className="flex flex-wrap gap-2">
                  {cities.map((city) => (
                    <Button
                      key={city.id}
                      variant={filters.city_id === city.id ? "default" : "outline"}
                      size="sm"
                      onClick={() => setFilters({ ...filters, city_id: filters.city_id === city.id ? null : city.id })}
                    >
                      {city.name}
                    </Button>
                  ))}
                </div>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
          
          <div className="space-y-4">
            <Label>Price</Label>
            <PriceSelector 
              price={filters.price} 
              setPrice={(value) => setFilters({ ...filters, price: value })} 
            />
          </div>
          
          <div className="flex items-center space-x-2">
            <Switch
              id="to-try-filter"
              checked={filters.toTry === true}
              onCheckedChange={(checked) => {
                setFilters({ ...filters, toTry: checked ? true : null, rating: checked ? 0 : filters.rating });
              }}
            />
            <Label htmlFor="to-try-filter">To Try</Label>
          </div>
          
          {filters.toTry !== true && (
            <div className="space-y-4">
              <Label>Minimum Rating: {filters.rating}/10</Label>
              <Slider
                min={0}
                max={10}
                step={1}
                value={[filters.rating]}
                onValueChange={(value) => setFilters({ ...filters, rating: value[0], toTry: false })}
              />
            </div>
          )}
          
          <div className="space-y-4">
            <Label>Sort By</Label>
            <div className="flex space-x-2">
            <Button
                variant={sortOption === 'dateAdded' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setSortOption('dateAdded')}
              >
                Date Added
              </Button>
              <Button
                variant={sortOption === 'name' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setSortOption('name')}
              >
                Name
              </Button>
              <Button
                variant={sortOption === 'rating' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setSortOption('rating')}
              >
                Rating
              </Button>
            </div>
          </div>
          
          <div className="flex justify-between mt-4">
            <Button variant="outline" size="sm" onClick={clearFilters}>
              Clear Filters
            </Button>
            <Button onClick={onClose}>
              Apply
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default RestaurantFilter;

================
File: src/features/restaurants/components/RestaurantList.jsx
================
import React from 'react'
import styles from './App.module.css'

function RestaurantList({ restaurants }) {
  return (
    <ul className={styles.list}>
      {restaurants.map((restaurant) => (
        <li key={restaurant.id} className={styles.listItem}>
          {restaurant.name} - {restaurant.cuisine}
        </li>
      ))}
    </ul>
  )
}

export default RestaurantList

================
File: src/features/restaurants/components/RestaurantPopup.jsx
================
import React from 'react';
import { Button } from '../../../components/ui/button';
import { Edit, Trash2, MapPin, UtensilsCrossed, ClipboardCheck, Star, Euro } from 'lucide-react';

const PriceDisplay = ({ price }) => {
  return (
    <div className="inline-flex">
      <span className="text-black">€</span>
      <span className={price >= 2 ? "text-black" : "text-gray-300"}>€</span>
      <span className={price >= 3 ? "text-black" : "text-gray-300"}>€</span>
    </div>
  );
};

const RatingStars = ({ rating }) => {
  const starCount = Math.round((rating / 10) * 5);
  return (
    <div className="flex">
      {[...Array(5)].map((_, index) => (
        <Star
          key={index}
          size={16}
          className={index < starCount ? "text-yellow-400 fill-current" : "text-gray-200"}
        />
      ))}
    </div>
  );
};

const InfoItem = ({ icon: Icon, label, children }) => (
  <div className="bg-gray-50 rounded-lg p-3">
    <div className="flex items-center space-x-3 mb-1">
      <Icon size={18} className="text-gray-400 flex-shrink-0" />
      <span className="text-xs text-gray-500">{label}</span>
    </div>
    <div className="font-medium text-gray-900 text-sm">{children}</div>
  </div>
);

const RestaurantPopup = ({ restaurant, onClose, onEdit, onDelete, isOwner }) => {
  if (!restaurant) return null;

  return (
    <div className="space-y-4">
      <div className="grid grid-cols-2 gap-4">
        <InfoItem icon={UtensilsCrossed} label="Type">
          {restaurant.restaurant_types?.name}
        </InfoItem>
        <InfoItem icon={MapPin} label="City">
          {restaurant.cities?.name}
        </InfoItem>
        <InfoItem icon={Euro} label="Price">
          <PriceDisplay price={restaurant.price} />
        </InfoItem>
        <InfoItem icon={Star} label="Rating">
          {restaurant.to_try ? 'To Try' : <RatingStars rating={restaurant.rating} />}
        </InfoItem>
      </div>
      {restaurant.notes && (
        <InfoItem icon={ClipboardCheck} label="Notes">
          {restaurant.notes}
        </InfoItem>
      )}
      {isOwner && (
        <div className="flex justify-end space-x-2 mt-4">
          <Button onClick={() => onEdit(restaurant)} variant="outline" size="sm">
            <Edit className="mr-2 h-4 w-4" /> Edit
          </Button>
          <Button onClick={() => onDelete(restaurant.id)} variant="destructive" size="sm">
            <Trash2 className="mr-2 h-4 w-4" /> Delete
          </Button>
        </div>
      )}
    </div>
  );
};

export default RestaurantPopup;

================
File: src/features/restaurants/hooks/useRestaurantOperations.js
================
import { supabase } from '../../../supabaseClient';

export const useRestaurantOperations = () => {
  const addRestaurant = async (restaurantData) => {
    const { data, error } = await supabase
      .from('restaurants')
      .insert([restaurantData])
      .select(`*, restaurant_types(id, name), cities(id, name)`);
    
    if (error) throw error;
    return data[0];
  };

  const updateRestaurant = async (id, updatedRestaurant) => {
    const { data, error } = await supabase
      .from('restaurants')
      .update(updatedRestaurant)
      .eq('id', id)
      .select();
    
    if (error) throw error;
    return data[0];
  };

  const deleteRestaurant = async (id) => {
    const { error } = await supabase
      .from('restaurants')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
  };

  return {
    addRestaurant,
    updateRestaurant,
    deleteRestaurant
  };
};

================
File: src/features/restaurants/hooks/useRestaurants.js
================
import { useState, useEffect, useCallback } from 'react';
import { supabase, getLikedRestaurants } from '../../../supabaseClient';

export const useRestaurants = (userId, page = 1, filters = {}, sortOption = 'dateAdded') => {
  const [restaurants, setRestaurants] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [totalCount, setTotalCount] = useState(0);
  const perPage = 10;

  const fetchRestaurants = useCallback(async () => {
    if (!userId) return;
    try {
      setLoading(true);
      let query = supabase
        .from('restaurants')
        .select(`
          *,
          restaurant_types (id, name),
          cities (id, name)
        `, { count: 'exact' })
        .eq('user_id', userId);

      // Apply filters
      if (filters.name) query = query.ilike('name', `%${filters.name}%`);
      if (filters.type_id) query = query.eq('type_id', filters.type_id);
      if (filters.city_id) query = query.eq('city_id', filters.city_id);
      if (filters.price) query = query.eq('price', filters.price);
      if (filters.toTry === true) {
        query = query.eq('to_try', true);
      } else if (filters.toTry === false) {
        query = query.eq('to_try', false);
        if (filters.rating > 0) query = query.gte('rating', filters.rating);
      }

      // Apply sorting
      switch (sortOption) {
        case 'name':
          query = query.order('name');
          break;
        case 'rating':
          query = query.order('rating', { ascending: false });
          break;
        case 'dateAdded':
        default:
          query = query.order('created_at', { ascending: false });
      }

      // Apply pagination
      query = query.range((page - 1) * perPage, page * perPage - 1);

      const { data: ownedRestaurants, error: ownedError, count } = await query;

      if (ownedError) throw ownedError;

      // Fetch liked restaurants
      const likedRestaurants = await getLikedRestaurants(userId);

      // Combine owned and liked restaurants, marking owned ones
      const allRestaurants = [
        ...ownedRestaurants.map(r => ({ ...r, isOwned: true })),
        ...likedRestaurants.filter(lr => !ownedRestaurants.some(or => or.id === lr.id))
      ];

      setRestaurants(allRestaurants);
      setTotalCount(count + likedRestaurants.length);
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  }, [userId, page, filters, sortOption]);

  useEffect(() => {
    fetchRestaurants();
  }, [fetchRestaurants]);

  const loadMore = async () => {
    const nextPage = Math.floor(restaurants.length / perPage) + 1;
    try {
      let query = supabase
        .from('restaurants')
        .select(`
          *,
          restaurant_types (id, name),
          cities (id, name)
        `)
        .eq('user_id', userId);

      // Apply filters
      if (filters.name) query = query.ilike('name', `%${filters.name}%`);
      if (filters.type_id) query = query.eq('type_id', filters.type_id);
      if (filters.city_id) query = query.eq('city_id', filters.city_id);
      if (filters.price) query = query.eq('price', filters.price);
      if (filters.toTry === true) {
        query = query.eq('to_try', true);
      } else if (filters.toTry === false) {
        query = query.eq('to_try', false);
        if (filters.rating > 0) query = query.gte('rating', filters.rating);
      }

      // Apply sorting
      switch (sortOption) {
        case 'name':
          query = query.order('name');
          break;
        case 'rating':
          query = query.order('rating', { ascending: false });
          break;
        case 'dateAdded':
        default:
          query = query.order('created_at', { ascending: false });
      }

      // Apply pagination
      query = query.range(nextPage * perPage, (nextPage + 1) * perPage - 1);

      const { data, error } = await query;

      if (error) throw error;

      // Fetch liked status for new restaurants
      const newRestaurantsWithLikedStatus = await Promise.all(
        data.map(async (restaurant) => {
          const { data: likedData } = await supabase
            .from('liked_restaurants')
            .select('*')
            .eq('user_id', userId)
            .eq('restaurant_id', restaurant.id)
            .single();

          return { ...restaurant, isLiked: !!likedData };
        })
      );

      setRestaurants(prevRestaurants => [...prevRestaurants, ...newRestaurantsWithLikedStatus]);
    } catch (error) {
      setError(error.message);
    }
  };

  return { 
    restaurants, 
    setRestaurants,
    loading, 
    error, 
    fetchRestaurants,
    totalCount,
    loadMore
  };
};

================
File: src/features/restaurants/hooks/useTypesAndCities.js
================
import { useState, useEffect } from 'react';
import { supabase } from '../../../supabaseClient';

export const useTypesAndCities = () => {
  const [types, setTypes] = useState([]);
  const [cities, setCities] = useState([]);

  const fetchTypes = async () => {
    try {
      const { data, error } = await supabase.from('restaurant_types').select('*');
      if (error) throw error;
      setTypes(data);
    } catch (error) {
      console.error('Error fetching types:', error);
      alert('Error fetching types: ' + error.message);
    }
  };

  const fetchCities = async () => {
    try {
      const { data, error } = await supabase.from('cities').select('*');
      if (error) throw error;
      setCities(data);
    } catch (error) {
      console.error('Error fetching cities:', error);
      alert('Error fetching cities: ' + error.message);
    }
  };

  const addType = async (newType) => {
    try {
      const { data, error } = await supabase
        .from('restaurant_types')
        .insert({ name: newType })
        .select();
      if (error) throw error;
      await fetchTypes();
      return data[0];
    } catch (error) {
      console.error('Error adding type:', error);
      alert('Failed to add type: ' + error.message);
    }
  };

  const addCity = async (newCity) => {
    try {
      const { data, error } = await supabase
        .from('cities')
        .insert({ name: newCity })
        .select();
      if (error) throw error;
      await fetchCities();
      return data[0];
    } catch (error) {
      console.error('Error adding city:', error);
      alert('Failed to add city: ' + error.message);
    }
  };

  const editType = async (id, newName) => {
    try {
      const { error } = await supabase
        .from('restaurant_types')
        .update({ name: newName })
        .eq('id', id);
      if (error) throw error;
      await fetchTypes();
    } catch (error) {
      console.error('Error editing type:', error);
      alert('Failed to edit type: ' + error.message);
    }
  };

  const editCity = async (id, newName) => {
    try {
      const { error } = await supabase
        .from('cities')
        .update({ name: newName })
        .eq('id', id);
      if (error) throw error;
      await fetchCities();
    } catch (error) {
      console.error('Error editing city:', error);
      alert('Failed to edit city: ' + error.message);
    }
  };

  const deleteType = async (id) => {
    try {
      const { error } = await supabase
        .from('restaurant_types')
        .delete()
        .eq('id', id);
      if (error) throw error;
      await fetchTypes();
    } catch (error) {
      console.error('Error deleting type:', error);
      alert('Failed to delete type: ' + error.message);
    }
  };

  const deleteCity = async (id) => {
    try {
      const { error } = await supabase
        .from('cities')
        .delete()
        .eq('id', id);
      if (error) throw error;
      await fetchCities();
    } catch (error) {
      console.error('Error deleting city:', error);
      alert('Failed to delete city: ' + error.message);
    }
  };

  useEffect(() => {
    fetchTypes();
    fetchCities();
  }, []);

  return {
    types,
    cities,
    addType,
    addCity,
    editType,
    editCity,
    deleteType,
    deleteCity,
    fetchTypes,
    fetchCities
  };
};

================
File: src/features/restaurants/RestaurantDashboard.jsx
================
import React, { useState, useEffect } from 'react';
import { getCurrentUser, getProfile, likeRestaurant, unlikeRestaurant } from '../../supabaseClient';
import UserSearch from '../../components/UserSearch';
import UserMenu from '../../components/UserMenu';
import { useRestaurants } from './hooks/useRestaurants';
import { Button } from '../../components/ui/button';
import RestaurantCard from './components/RestaurantCard';
import RestaurantPopup from './components/RestaurantPopup';
import AddRestaurant from './components/AddRestaurant';
import RestaurantFilter from './components/RestaurantFilter';
import { useTypesAndCities } from './hooks/useTypesAndCities';
import { useRestaurantOperations } from './hooks/useRestaurantOperations';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '../../components/ui/dialog';
import { PlusCircle, Filter, ArrowLeft } from 'lucide-react';

const RestaurantDashboard = ({ user, setUser }) => {
  const [viewingUserId, setViewingUserId] = useState(user?.id);
  const [viewingProfile, setViewingProfile] = useState(null);
  const [searchedUser, setSearchedUser] = useState(null);
  const [page, setPage] = useState(1);
  const [filters, setFilters] = useState({
    name: '',
    type_id: null,
    city_id: null,
    toTry: null,
    rating: 0,
    price: null
  });
  const [sortOption, setSortOption] = useState('dateAdded');
  const [isFilterDialogOpen, setIsFilterDialogOpen] = useState(false);
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [selectedRestaurant, setSelectedRestaurant] = useState(null);
  const [restaurantToEdit, setRestaurantToEdit] = useState(null);
  
  const { types, cities, addType, editType, deleteType, addCity, editCity, deleteCity } = useTypesAndCities();
  const { addRestaurant, updateRestaurant, deleteRestaurant } = useRestaurantOperations();
  const { 
    restaurants, 
    setRestaurants,
    loading, 
    error, 
    fetchRestaurants, 
    totalCount, 
    loadMore 
  } = useRestaurants(viewingUserId, page, filters, sortOption);

  useEffect(() => {
    if (viewingUserId) {
      const fetchProfile = async () => {
        try {
          const profile = await getProfile(viewingUserId);
          setViewingProfile(profile);
        } catch (error) {
          console.error('Error fetching profile:', error);
        }
      };
      fetchProfile();
      fetchRestaurants();
    }
  }, [viewingUserId, fetchRestaurants]);

  const handleUserSelect = (selectedUser) => {
    setSearchedUser(selectedUser);
    setViewingUserId(selectedUser.id);
    setPage(1);
  };

  const handleRestaurantClick = (restaurant) => {
    setSelectedRestaurant(restaurant);
  };

  const handleAddRestaurant = async (newRestaurant) => {
    try {
      const addedRestaurant = await addRestaurant({ ...newRestaurant, user_id: user.id });
      setRestaurants(prevRestaurants => [addedRestaurant, ...prevRestaurants]);
      setIsAddDialogOpen(false);
    } catch (error) {
      console.error('Failed to add restaurant:', error);
      alert(`Failed to add restaurant: ${error.message}`);
    }
  };

  const handleEditClick = (restaurant) => {
    setRestaurantToEdit(restaurant);
    setIsEditDialogOpen(true);
  };

  const handleUpdateRestaurant = async (updatedRestaurant) => {
    try {
      const { id, city_id, type_id, cities, restaurant_types, ...rest } = updatedRestaurant;
      
      if (!id) {
        throw new Error("Restaurant ID is missing");
      }

      const updateData = {
        ...rest,
        city_id: typeof city_id === 'object' ? city_id.id : city_id,
        type_id: typeof type_id === 'object' ? type_id.id : type_id
      };

      await updateRestaurant(id, updateData);
      fetchRestaurants();
      setIsEditDialogOpen(false);
      setSelectedRestaurant(null);
    } catch (error) {
      console.error('Failed to update restaurant:', error);
      alert(`Failed to update restaurant: ${error.message}`);
    }
  };

  const handleDeleteRestaurant = async (id) => {
    try {
      await deleteRestaurant(id);
      fetchRestaurants();
      setSelectedRestaurant(null);
    } catch (error) {
      console.error('Failed to delete restaurant:', error);
      alert(`Failed to delete restaurant: ${error.message}`);
    }
  };

  const handleLike = async (restaurantId) => {
    try {
      await likeRestaurant(user.id, restaurantId);
      setRestaurants(prevRestaurants => 
        prevRestaurants.map(r => 
          r.id === restaurantId ? { ...r, isLiked: true } : r
        )
      );
    } catch (error) {
      console.error('Failed to like restaurant:', error);
      alert(`Failed to like restaurant: ${error.message}`);
    }
  };

  const handleUnlike = async (restaurantId) => {
    try {
      await unlikeRestaurant(user.id, restaurantId);
      setRestaurants(prevRestaurants => 
        prevRestaurants.map(r => 
          r.id === restaurantId ? { ...r, isLiked: false } : r
        )
      );
    } catch (error) {
      console.error('Failed to unlike restaurant:', error);
      alert(`Failed to unlike restaurant: ${error.message}`);
    }
  };

  const activeFilterCount = Object.values(filters).filter(value => 
    value !== null && value !== '' && value !== 0 && value !== false
  ).length;

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div className="max-w-4xl mx-auto p-4">
      <div className="mt-8">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold">
            {searchedUser ? `${searchedUser.username}'s Favorants` : 'My Favorants'}
          </h1>
          <div className="flex items-center space-x-2">
            {searchedUser && (
              <Button 
                variant="outline"
                size="sm"
                onClick={() => {
                  setSearchedUser(null);
                  setViewingUserId(user.id);
                }}
                className="flex items-center"
              >
                <ArrowLeft className="mr-2 h-4 w-4" />
                Back
              </Button>
            )}
            <Button 
              onClick={() => setIsFilterDialogOpen(true)} 
              variant="outline" 
              size="sm"
              className="relative"
            >
              <Filter className="mr-2 h-4 w-4" /> 
              Filter
              {activeFilterCount > 0 && (
                <span className="absolute -top-2 -right-2 bg-primary text-primary-foreground text-xs rounded-full w-5 h-5 flex items-center justify-center">
                  {activeFilterCount}
                </span>
              )}
            </Button>
            {user.id === viewingUserId && (
              <Button onClick={() => setIsAddDialogOpen(true)} size="sm" className="bg-primary hover:bg-primary/90">
                <PlusCircle className="mr-2 h-4 w-4" /> Add
              </Button>
            )}
            <UserSearch onUserSelect={handleUserSelect} currentUserId={user.id} />
            <UserMenu user={user} setUser={setUser} />
          </div>
        </div>
      </div>
      
      <div className="mt-8">
        <div className="grid grid-cols-1 gap-4">
          {restaurants.map((restaurant) => (
            <RestaurantCard 
              key={restaurant.id} 
              restaurant={restaurant} 
              onClick={() => handleRestaurantClick(restaurant)}
              onLike={handleLike}
              onUnlike={handleUnlike}
              currentUserId={user.id}
            />
          ))}
        </div>
      </div>
      
      {restaurants.length < totalCount && (
        <Button onClick={loadMore} className="mt-6 w-full">Load More</Button>
      )}
      
      <Dialog open={!!selectedRestaurant} onOpenChange={() => setSelectedRestaurant(null)}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>{selectedRestaurant?.name}</DialogTitle>
          </DialogHeader>
          <RestaurantPopup
            restaurant={selectedRestaurant}
            onClose={() => setSelectedRestaurant(null)}
            onEdit={handleEditClick}
            onDelete={handleDeleteRestaurant}
            isOwner={user && user.id === viewingUserId}
          />
        </DialogContent>
      </Dialog>
      
      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Add New Favorant</DialogTitle>
            <DialogDescription>Enter the details for your new favorite restaurant.</DialogDescription>
          </DialogHeader>
          <AddRestaurant
            onAdd={handleAddRestaurant}
            onCancel={() => setIsAddDialogOpen(false)}
            types={types}
            cities={cities}
            addType={addType}
            editType={editType}
            deleteType={deleteType}
            addCity={addCity}
            editCity={editCity}
            deleteCity={deleteCity}
          />
        </DialogContent>
      </Dialog>
      
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Edit Favorant</DialogTitle>
          </DialogHeader>
          <AddRestaurant
            onAdd={handleUpdateRestaurant}
            onCancel={() => setIsEditDialogOpen(false)}
            types={types}
            cities={cities}
            addType={addType}
            editType={editType}
            deleteType={deleteType}
            addCity={addCity}
            editCity={editCity}
            deleteCity={deleteCity}
            initialData={restaurantToEdit}
          />
        </DialogContent>
      </Dialog>
      
      <RestaurantFilter
        isOpen={isFilterDialogOpen}
        onClose={() => setIsFilterDialogOpen(false)}
        types={types}
        cities={cities}
        filters={filters}
        setFilters={setFilters}
        sortOption={sortOption}
        setSortOption={setSortOption}
      />
    </div>
  );
};

export default RestaurantDashboard;

================
File: src/lib/utils.js
================
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}

================
File: src/App.css
================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: src/App.jsx
================
import React, { useState, useEffect } from 'react';
import RestaurantDashboard from './features/restaurants/RestaurantDashboard';
import Auth from './components/Auth';
import { getCurrentUser } from './supabaseClient';
import ErrorBoundary from './ErrorBoundary';

function App() {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const currentUser = await getCurrentUser();
        setUser(currentUser);
      } catch (error) {
        console.error("Error fetching user:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchUser();
  }, []);

  if (loading) return <div>Loading...</div>;

  return (
    <ErrorBoundary>
      {user ? (
        <RestaurantDashboard user={user} setUser={setUser} />
      ) : (
        <Auth setUser={setUser} />
      )}
    </ErrorBoundary>
  );
}

export default App;

================
File: src/App.module.css
================
.app {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  font-family: Arial, sans-serif;
}

.title {
  color: #333;
  text-align: center;
}

.form {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}

.input, .searchInput {
  flex: 1;
  padding: 10px;
  font-size: 16px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.button, .deleteButton {
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  border: none;
  cursor: pointer;
  font-size: 16px;
  border-radius: 4px;
}

.deleteButton {
  background-color: #dc3545;
  margin-left: 10px;
  padding: 5px 10px;
  font-size: 14px;
}

.list {
  list-style-type: none;
  padding: 0;
}

.listItem {
  background-color: #f8f9fa;
  margin-bottom: 10px;
  padding: 10px;
  border-radius: 4px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.searchInput {
  margin-bottom: 20px;
  width: 100%;
}

================
File: src/ErrorBoundary.jsx
================
import React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    console.log('Caught an error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return <h1>Something went wrong.</h1>;
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
 
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
 
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
 
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
 
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
 
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
 
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
 
    --radius: 0.5rem;
 
    --chart-1: 12 76% 61%;
 
    --chart-2: 173 58% 39%;
 
    --chart-3: 197 37% 24%;
 
    --chart-4: 43 74% 66%;
 
    --chart-5: 27 87% 67%;
  }
 
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
 
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
 
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
 
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
 
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
 
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
 
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
 
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
 
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

.DialogOverlay {
  background-color: rgba(0, 0, 0, 0.5);
  position: fixed;
  inset: 0;
  animation: overlayShow 150ms cubic-bezier(0.16, 1, 0.3, 1);
}

.DialogContent {
  background-color: white;
  border-radius: 6px;
  box-shadow: hsl(206 22% 7% / 35%) 0px 10px 38px -10px, hsl(206 22% 7% / 20%) 0px 10px 20px -15px;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 90vw;
  max-width: 450px;
  max-height: 85vh;
  padding: 25px;
  animation: contentShow 150ms cubic-bezier(0.16, 1, 0.3, 1);
}

@keyframes overlayShow {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes contentShow {
  from { opacity: 0; transform: translate(-50%, -48%) scale(0.96); }
  to { opacity: 1; transform: translate(-50%, -50%) scale(1); }
}

@media (max-width: 640px) {
  input, select, textarea {
    font-size: 16px !important;
  }
}

================
File: src/main.jsx
================
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

================
File: src/supabaseClient.js
================
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

export const signUp = async (email, password, username) => {
  try {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: { username }
      }
    });
    if (error) throw error;
    
    if (data.user) {
      // Check if profile exists
      const { data: existingProfile, error: profileCheckError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', data.user.id)
        .single();

      if (profileCheckError && profileCheckError.code !== 'PGRST116') {
        throw profileCheckError;
      }

      if (!existingProfile) {
        // Only insert if profile doesn't exist
        const { error: insertError } = await supabase
          .from('profiles')
          .insert([{ id: data.user.id, username }]);
        if (insertError) throw insertError;
      }
    }
    return data;
  } catch (error) {
    console.error("Sign up error:", error);
    throw error;
  }
};

export const signIn = async (email, password) => {
  const { data, error } = await supabase.auth.signInWithPassword({ email, password });
  if (error) throw error;
  return data;
};

export const signOut = async () => {
  const { error } = await supabase.auth.signOut();
  if (error) throw error;
};

export const getCurrentUser = async () => {
  const { data: { session }, error } = await supabase.auth.getSession();
  if (error) {
    console.error("Error getting session:", error);
    return null;
  }
  if (!session) {
    console.log("No active session");
    return null;
  }
  const { data: { user } } = await supabase.auth.getUser();
  if (user) {
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', user.id)
      .single();
    if (profileError && profileError.code !== 'PGRST116') {
      console.error("Error fetching profile:", profileError);
    }
    return { ...user, profile };
  }
  return null;
};

export const getProfile = async (userId) => {
  const { data, error } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', userId)
    .single();
  if (error) throw error;
  return data;
};

export const searchUsers = async (query, currentUserId) => {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('id, username')
      .neq('id', currentUserId)  // Exclude the current user
      .ilike('username', `%${query}%`)
      .limit(5);

    if (error) throw error;
    return { data: data || [] };
  } catch (error) {
    console.error('Error searching users:', error);
    return { data: [] };
  }
};

export const updateProfile = async (userId, updates) => {
  const { data, error } = await supabase
    .from('profiles')
    .update(updates)
    .eq('id', userId);
  if (error) throw error;
  return data;
};

export const likeRestaurant = async (userId, restaurantId) => {
  const { data, error } = await supabase
    .from('liked_restaurants')
    .upsert({ user_id: userId, restaurant_id: restaurantId }, { onConflict: 'user_id,restaurant_id' });
  if (error) throw error;
  return data;
};

export const unlikeRestaurant = async (userId, restaurantId) => {
  const { data, error } = await supabase
    .from('liked_restaurants')
    .delete()
    .match({ user_id: userId, restaurant_id: restaurantId });
  if (error) throw error;
  return data;
};

export const getLikedRestaurants = async (userId) => {
  const { data, error } = await supabase
    .from('liked_restaurants')
    .select(`
      restaurant_id,
      restaurants (*)
    `)
    .eq('user_id', userId);
  if (error) throw error;
  return data.map(item => ({ ...item.restaurants, isLiked: true }));
};

// Add this for debugging
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Auth event:', event, 'Session:', session)
})

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local
.env

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": false,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: jsconfig.json
================
{
    "compilerOptions": {
      "baseUrl": ".",
      "paths": {
        "@/*": ["./src/*"]
      },
      "jsx": "react-jsx",
      "module": "ESNext",
      "moduleResolution": "Node",
      "target": "ESNext"
    },
    "include": ["src/**/*"],
    "exclude": ["node_modules", "dist"]
  }

================
File: package.json
================
{
  "name": "restaurant-app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@heroicons/react": "^2.1.5",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@supabase/supabase-js": "^2.45.4",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "firebase": "^10.13.1",
    "framer-motion": "^11.5.4",
    "lucide-react": "^0.439.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react": "^7.35.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "firebase-tools": "^13.16.0",
    "globals": "^15.9.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.12",
    "vite": "^5.4.1"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
    darkMode: ["class"],
    content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
}

================
File: vite.config.js
================
import path from "path"
import react from "@vitejs/plugin-react"
import { defineConfig } from "vite"

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
})
